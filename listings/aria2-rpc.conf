################################ Aria2 配置文件 ################################
#       需要保存为 ~/.aria2/aria2.conf                                         #
#       或者在运行时通过 --conf-path 选项指定                                  #
################################################################################

############################## RPC 以及安全性设置 ##############################
# 启用 RPC 服务
enable-rpc=true
# 允许接受所有来源的 RPC 请求
rpc-allow-origin-all=true
# 接受非本地请求
rpc-listen-all=true
# RPC 服务所绑定的端口
rpc-listen-port=6800
# 不保存通过 RPC 上传的种子/元数据文件
rpc-save-upload-metadata=false
# rpc 密钥（旧的 rpc-user,passwd 已被废弃）
# 在客户端需要附带此密钥才接受请求
#rpc-secret=

##################################### 速度 #####################################
# 最大并发下载量
max-concurrent-downloads=5
# 一次下载任务最多向服务器同时建立的连接数
max-connection-per-server=5
# 最小文件分片大小, 下载线程数上限取决于能分出多少片, 对于小文件重要
min-split-size=2M
# 单文件最大线程数
split=4
# 全局下载速度限制，0 表示不限制
max-overall-download-limit=0
# 单文件下载速度限制
max-download-limit=0
# 上传速度限制
max-overall-upload-limit=0
# 单文件上传速度限制
max-upload-limit=0
# 断开速度过慢的连接
lowest-speed-limit=0

################################# 进度保存相关 #################################
input-file=/data/cache/session.txt
save-session=/data/cache/session.txt
# 定时保存会话的时间间隔（秒），需要1.16.1之后的release版
save-session-interval=60
# 自动保存 .aria2 控制文件的时间间隔（秒）
# 设为 0 则不会保存
#auto-save-interval=
# 当启动 aria2 时，是否从上次保存的会话继续下载
continue=true

################################### 本地文件 ###################################
# 下载文件保存路径, 默认为当前启动位置
dir=/data/download
# 磁盘缓存，需要 1.16 以上版本
# 其作用是减少磁盘 IO 频率
disk-cache=64M
# 启用 mmap ，需要 1.15 以上版本
enable-mmap=true
# 文件预分配, 能有效降低文件碎片, 提高磁盘性能. 缺点是预分配时间较长
# none      不会进行预分配
# prealloc  在下载前预分配
# falloc    在下载前预分配，但不会阻塞；需要文件系统支持 posix_fallocate(3) 函数
#           目前 ext4(extended) btrfs xfs ntfs(mingw built) 支持
# trunc     让操作系统将对应文件截断至指定大小，但这是仅仅是修改文件系统元数据，
#           而无法避免磁盘碎片
# 所需时间 none < trunc < falloc << prealloc
file-allocation=falloc

################################### HTTP设置 ###################################
# 通过 HTTP(S) 下载时的 referer 头字段的设置
# *     将下载地址作为 referer 头
referer=*
# 加载 cookies，支持以下三种格式：
# - Firefox3 format (SQLite3)
# - Chromium/Google Chrome (SQLite3)
# - Mozilla/Firefox(1.x/2.x)/Netscape
# 通常将此字段设置为浏览器所使用的 cookie 数据库文件
# 需要 aria2 在编译时链接了 sqlite3 库
#load-cookies=~/.aria2/cookies.sqlite
# 用户身份，通常设置为浏览器使用的 User-Agent，以下载某些只允许浏览下载的网站
# 可以在 https://github.com/fengzhizi715/user-agent-list 获取各浏览器使用的 UA
user-agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36'

#################################### BT相关 ####################################
# 不将仅做种的任务计入总任务数限制
bt-detach-seed-only=true
# 启用本地节点查找
bt-enable-lpd=true
# 强制加密, 拒绝旧 BT 协议握手，防迅雷必备
bt-require-crypto=true
# 在下载磁力链接时，先检查本地元数据缓存，如果不存在再向 DHT 请求
bt-load-saved-metadata=true
# 单种子最大连接数
bt-max-peers=0
# 通过磁力链接下载时，将元数据保存为 torrent 文件
bt-save-metadata=true
# 添加额外的tracker
# https://trackerslist.com/all_aria2.txt 提供了大量可用 tracker 地址
#bt-tracker=<uris>
# 启用 DHT 网络
enable-dht=true
enable-dht6=true
# dht 数据文件保存地址
dht-file-path=/data/cache/dht.dat
dht-file-path6=/data/cache/dht6.dat
# 当下载的文件是一个种子(以.torrent结尾)时, 自动下载BT
follow-torrent=true
# BT监听端口, 当端口屏蔽时修改
#listen-port=6881-6999
# 设置全局最大 BT 上传速度
max-overall-upload-limit=4M
# BT 下载中，该端点名称前缀
peer-id-prefix=A2-1-35-0-
peer-agent=aria2/1.35.0
# 分享率，当上传达到此比率则停止做种
seed-ratio=2.0
# 即便任务已完成或被移除，也保存 .aria2 控制文件，这对识别下载完成的种子很有帮助
# 默认情况下，控制文件将在下载完成后删除
force-save=false
# 对于继续种子下载，通过检验和而非控制文件方式获取下载状态
check-integrity=true

################################### 事件钩子 ###################################
#       事件钩子的参数都是一个指向 Bash 或批处理脚本文件的路径                 #
#       当事件发生时，该脚本被调用并按顺序传入三个参数                         #
#                                                                              #
#       -   GID                                                                #
#       -   文件数目                                                           #
#       -   文件路径，如果有多个文件，则只会传递第一个，                       #
#           要获取更多文件路径，需要 RPC                                       #
################################################################################
# 在 BT 下载完整（Hash 检查通过）后运行
#on-bt-download-complete=/data/script/none.sh
# 在 HTTP(S) 和 FTP 下载完成后运行
#on-download-complete=/data/script/none.sh
# 下载任务因错误而终止
#on-download-error=/data/script/none.sh
# 下载任务被主动暂停
#on-download-pause=/data/script/none.sh
# 下载任务开始前
#on-download-start=/data/script/none.sh
# 下载任务结束后，可以作为 complete 和 error 两个事件的 fallback
#on-download-stop=/data/script/none.sh